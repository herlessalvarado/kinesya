{"version":3,"sources":["routing/PrivateRoute.tsx","App.tsx","serviceWorker.ts","index.tsx","cache/CookieManager.ts"],"names":["PrivateRoute","children","redirect","rest","render","location","getJWT","getRefreshToken","to","pathname","state","from","Profile","lazy","Home","Login","Register","UpdateProfile","App","fallback","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Cookie","get","process","AuthOn","token","refreshToken","set","AuthOff","remove"],"mappings":"uNA4BeA,EApBM,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,SAAaC,EAA0B,uCACrE,OACI,kBAAC,IAAD,iBACQA,EADR,CAEIC,OAAQ,gBAAGC,EAAH,EAAGA,SAAH,OACJC,eAAYC,cACRN,EAEA,kBAAC,IAAD,CACIO,GAAI,CACAC,SAAUP,EACVQ,MAAO,CAAEC,KAAMN,W,gBCdrCO,EAAUC,gBAAK,kBAAM,+DACrBC,EAAOD,gBAAK,kBAAM,sEAClBE,EAAQF,gBAAK,kBAAM,sEACnBG,EAAWH,gBAAK,kBAAM,6EACtBI,EAAgBJ,gBAAK,kBAAM,4EA8BlBK,MA5Bf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,4CAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAACP,EAAD,OAEJ,kBAAC,IAAD,CAAOO,KAAK,UACR,kBAACN,EAAD,OAEJ,kBAAC,IAAD,CAAOM,KAAK,aACR,kBAACL,EAAD,OAEJ,kBAAC,IAAD,CAAOK,KAAK,mBACR,kBAACT,EAAD,OAGJ,kBAAC,EAAD,CAAcS,KAAK,aAAanB,SAAS,UAErC,kBAACe,EAAD,WCnBJK,QACa,cAA7BC,OAAOlB,SAASmB,UAEiB,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MAAM,2DCZvCC,IAAStB,OACL,kBAAC,IAAMuB,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD2HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,a,+BE1IpC,4JAEO,SAASjC,IACZ,OAAOkC,IAAOC,IAAIC,SAEf,SAASnC,IACZ,OAAOiC,IAAOC,IAAIC,iBAGf,SAASC,EAAOC,EAAeC,GAClCL,IAAOM,IAAIJ,QAAgCE,GAC3CJ,IAAOM,IAAIJ,gBAA0CG,GAGlD,SAASE,IACZP,IAAOQ,OAAON,iBACdF,IAAOQ,OAAON,Y","file":"static/js/main.2ab62f59.chunk.js","sourcesContent":["import React from \"react\"\nimport { Redirect, Route, RouteProps } from \"react-router-dom\"\nimport { getJWT, getRefreshToken } from \"../cache/CookieManager\"\n\ninterface PrivateRoutes extends RouteProps {\n    redirect: any\n}\n\nconst PrivateRoute = ({ children, redirect, ...rest }: PrivateRoutes) => {\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                getJWT() && getRefreshToken() ? (\n                    children\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: redirect,\n                            state: { from: location },\n                        }}\n                    />\n                )\n            }\n        />\n    )\n}\n\nexport default PrivateRoute\n","import React, { lazy, Suspense } from \"react\"\n\nimport PrivateRoute from \"./routing/PrivateRoute\"\nimport \"croppie/croppie.css\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nconst Profile = lazy(() => import(\"./views/Profile\"))\nconst Home = lazy(() => import(\"./views/Home\"))\nconst Login = lazy(() => import(\"./views/Login\"))\nconst Register = lazy(() => import(\"./views/Register\"))\nconst UpdateProfile = lazy(() => import(\"./views/UpdateProfile\"))\n\nfunction App() {\n    return (\n        <Router>\n            <Suspense fallback={<div>Loading...</div>}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home />\n                    </Route>\n                    <Route path=\"/login\">\n                        <Login />\n                    </Route>\n                    <Route path=\"/register\">\n                        <Register />\n                    </Route>\n                    <Route path=\"/user/:username\">\n                        <Profile />\n                    </Route>\n\n                    <PrivateRoute path=\"/dashboard\" redirect=\"/login\">\n                        {/* <Dashboard /> */}\n                        <UpdateProfile />\n                    </PrivateRoute>\n                </Switch>\n            </Suspense>\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import Cookie from \"js-cookie\"\n\nexport function getJWT() {\n    return Cookie.get(process.env.REACT_APP_JWT_KEY!)\n}\nexport function getRefreshToken() {\n    return Cookie.get(process.env.REACT_APP_REFRESH_TOKEN_KEY!)\n}\n\nexport function AuthOn(token: string, refreshToken: string) {\n    Cookie.set(process.env.REACT_APP_JWT_KEY!, token)\n    Cookie.set(process.env.REACT_APP_REFRESH_TOKEN_KEY!, refreshToken)\n}\n\nexport function AuthOff() {\n    Cookie.remove(process.env.REACT_APP_REFRESH_TOKEN_KEY!)\n    Cookie.remove(process.env.REACT_APP_JWT_KEY!)\n}\n"],"sourceRoot":""}